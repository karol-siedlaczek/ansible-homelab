- name: Check if install directory exists
  stat:
    path: "{{ install_dir }}"
  register: dest_dir

- name: Create install directory
  file:
    path: "{{ install_dir }}"
    state: directory
  when: not dest_dir.stat.exists

- name: "Check if other {{ exporter.name }} exporter instance exists in {{ install_dir }}"
  stat:
    path: "{{ install_dir }}/{{ exporter.name }}"
  register: old_exporter

- name: "Remove old {{ exporter.name }} exporter instance"
  file:
    path: "{{ install_dir }}/{{ exporter.name }}"
    state: absent
  when: old_exporter.stat.exists

- name: Create group
  group:
    name: "{{ exporter.name }}"
  register: group

- name: Create user
  user:
    name: "{{ exporter.name }}"
    shell: /bin/false
    group: "{{ exporter.name }}"
    create_home: false
  register: user

- name: "Download {{ exporter.name }} from '{{ exporter.download_url }}'"
  get_url:
    url: " {{ exporter.download_url }}"
    dest: "{{ install_dir }}"
    checksum: "sha256:{{ exporter.sha256sum }}"
  register: download_result
  environment: "{{ env_proxy }}"

- name: "Unarchive '{{ download_result.dest }}' package"
  unarchive:
    src: "{{ download_result.dest }}"
    dest: "{{ install_dir }}"
    mode: 0644
    owner: root
    group: root
    remote_src: true
    list_files: yes
  register: unarchive_result

- name: "Remove package {{ download_result.dest }}"
  file:
    path: "{{ download_result.dest }}"
    state: absent

- name: "Copy {{ exporter.name }} files to '{{ install_dir}}/{{ exporter.name}}'"
  copy:
    src: "{{ install_dir }}/{{ unarchive_result.files[0] }}"
    dest: "{{ install_dir }}/{{ exporter.name }}"
    remote_src: true
    owner: "{{ user.name }}"
    group: "{{ group.name }}"
    mode: 644

- name: "Remove old directory for {{ exporter.name }}"
  file:
    path: "{{ install_dir }}/{{ unarchive_result.files[0] }}"
    state: absent

#  service.yml (1/2) START

- name: "Check if {{ exporter.name }}.service file exists"
  stat:
    path: "/lib/systemd/system/{{ exporter.name }}.service"
  register: old_service_file

- name: "Remove old {{ exporter.name }}.service file"
  file:
    path: "/lib/systemd/system/{{ exporter.name }}.service"
    state: absent
  when: old_service_file.stat.exists

- name: "Check if /etc/init.d/{{ exporter.name }} file exists"
  stat:
    path: "/etc/init.d/{{ exporter.name }}"
  register: old_init_script

- name: "Remove old /etc/init.d/{{ exporter.name }} file"
  file:
    path: "/etc/init.d/{{ exporter.name }}"
    state: absent
  when: old_init_script.stat.exists

- name: Create systemd {{ exporter.name }}.service file
  template:
    src: templates/service.j2
    dest: "/lib/systemd/system/{{ exporter.name }}.service"
    owner: "{{ user.name }}"
    group: "{{ group.name }}"
    mode: 0744

- name: "Add {{ exporter.name }}.service to autostart"
  file:
    src: "/lib/systemd/system/{{ exporter.name }}.service"
    dest: "/etc/systemd/system{{ exporter.name }}.service"
    state: link
    force: yes
    owner: "{{ user.name }}"
    group: "{{ group.name }}"
  when: service.startup == "y"
  notify:
    - Reload systemd

#  service.yml (1/2) STOP

- name: "Set permissions on {{ install_dir }}/{{ exporter.name }}"
  file:
    path: "{{ install_dir }}/{{ exporter.name }}"
    state: directory
    mode: 0755
    recurse: true
    owner: "{{ user.name }}"
    group: "{{ group.name }}"

- name: "Set permissions on {{ install_dir }}/{{ exporter.name }}/node_exporter"
  file:
    path: "{{ install_dir }}/{{ exporter.name }}/node_exporter"
    state: file
    mode: 0755

#  service.yml (2/2) START

- name: "Enable {{ exporter.name }}.service"
  systemd:
    name: "{{ exporter.name }}.service"
    enabled: true

- name: "Start {{ exporter.name }}.service"
  systemd:
    name: "{{ exporter.name }}.service"
    state: started

- name: "Create /etc/init.d/{{ exporter.name }} script"
  template:
    src: templates/init.sh.j2
    dest: "/etc/init.d/{{ exporter.name }}"
    owner: "{{ user.name }}"
    group: "{{ group.name }}"
    mode: 0744

#  service.yml (2/2) STOP